# -*- coding: utf-8 -*-
"""TCS(Forage).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kjgkLN-CXXaQU2JSME8wCpnJ9A4FzQem
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/Delinquency_prediction_dataset.csv')
df

df.info()

# Basic structure and info
print("Shape of the dataset:", df.shape)
print("\nData Types:\n", df.dtypes)
print("\nMissing Values:\n", df.isnull().sum())

df.describe(include='all')

plt.figure(figsize=(10, 6))
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title("Missing Data Heatmap")
plt.show()

sns.countplot(x='Delinquent_Account', data=df)
plt.title("Delinquency Distribution")
plt.xlabel("Delinquent Account (0 = No, 1 = Yes)")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(10, 8))
corr = df.corr(numeric_only=True)
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

numeric_features = ['Age', 'Income', 'Credit_Score', 'Credit_Utilization',
                    'Loan_Balance', 'Debt_to_Income_Ratio']

for feature in numeric_features:
    plt.figure(figsize=(6, 4))
    sns.boxplot(x='Delinquent_Account', y=feature, data=df)
    plt.title(f"{feature} vs Delinquent Account")
    plt.show()

# Fill missing values using median for important numeric features
impute_median_cols = ['Income', 'Credit_Score', 'Loan_Balance']

for col in impute_median_cols:
    median_val = df[col].median()
    df[col].fillna(median_val, inplace=True)

# Check again
df.isnull().sum()

df.to_csv("Cleaned_Delinquency_Data.csv", index=False)
print("âœ… Cleaned dataset saved as Cleaned_Delinquency_Data.csv")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load cleaned data
df = pd.read_csv("Cleaned_Delinquency_Data.csv")

# One-hot encode categorical variables
df = pd.get_dummies(df, columns=['Employment_Status', 'Credit_Card_Type', 'Location'], drop_first=True)

# Select features and target
features = [
    'Credit_Score', 'Credit_Utilization', 'Missed_Payments',
    'Income', 'Debt_to_Income_Ratio', 'Loan_Balance', 'Account_Tenure'
] + [col for col in df.columns if col.startswith(('Employment_Status_', 'Credit_Card_Type_', 'Location_'))]

X = df[features]
y = df['Delinquent_Account']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize numeric features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Logistic Regression
log_model = LogisticRegression(max_iter=1000)
log_model.fit(X_train_scaled, y_train)
y_pred_log = log_model.predict(X_test_scaled)
print("ðŸ”Ž Logistic Regression Report:\n")
print(classification_report(y_test, y_pred_log))
print("AUC Score (Logistic):", roc_auc_score(y_test, log_model.predict_proba(X_test_scaled)[:, 1]))

# Random Forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
print("\nðŸŒ² Random Forest Report:\n")
print(classification_report(y_test, y_pred_rf))
print("AUC Score (Random Forest):", roc_auc_score(y_test, rf_model.predict_proba(X_test)[:, 1]))

# Feature importance
feature_importances = pd.DataFrame({
    'Feature': features,
    'Importance': rf_model.feature_importances_
}).sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importances.head(10))
plt.title("Top 10 Feature Importances (Random Forest)")
plt.tight_layout()
plt.show()

